//! A node that provides a delay that can be restarted/retriggered.

/// Delay execution but allow retriggering to reset the timer.
fn @[pulsar_node_fn_id]@() {
    use std::sync::Mutex;
    use std::time::{Duration, Instant};
    
    static DELAY_STATE: Mutex<Option<Instant>> = Mutex::new(None);
    
    let delay_duration = Duration::from_millis(@[in_delay_ms_number]@ as u64);
    
    // Set/reset the delay start time
    {
        let mut state = DELAY_STATE.lock().unwrap();
        *state = Some(Instant::now());
    }
    
    // Sleep for the delay duration
    std::thread::sleep(delay_duration);
    
    // Check if we weren't retriggered during the delay
    {
        let state = DELAY_STATE.lock().unwrap();
        if let Some(start_time) = *state {
            if start_time.elapsed() >= delay_duration {
                @[pulsar_exec_completed]@
            }
        }
    }
}