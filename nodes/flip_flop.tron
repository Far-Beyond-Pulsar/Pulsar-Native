//! A node that alternates between two outputs each time it is triggered (like Unreal's FlipFlop).
//!
//! This node maintains an internal state and switches between two execution branches (`pulsar_exec_a` and `pulsar_exec_b`) on each call.
//! Useful for toggling behavior, alternating actions, or implementing simple state machines.
//!
//! # Behavior
//! - On the first call, executes branch A.
//! - On the next call, executes branch B.
//! - Alternates between A and B on subsequent calls.
//!
//! # Example
//! If connected to two print nodes, the output will alternate between printing "A" and "B" each time this node is triggered.
//!
//! # Notes
//! Uses a static atomic boolean for thread-safe state tracking. The state persists for the lifetime of the process.

/// Alternate between two outputs each time it's called.
fn @[pulsar_node_fn_id]@() {
    use std::sync::atomic::{AtomicBool, Ordering};
    static FLIP_STATE: AtomicBool = AtomicBool::new(false);

    let current_state = FLIP_STATE.load(Ordering::Relaxed);
    FLIP_STATE.store(!current_state, Ordering::Relaxed);

    if current_state {
        @[pulsar_exec_a]@
    } else {
        @[pulsar_exec_b]@
    }
}