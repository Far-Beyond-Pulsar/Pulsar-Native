//! A node that finds the path to an executable command.
//!
//! This node searches for the specified command in the system's PATH and returns the full path to the executable if found.
//! Useful for verifying tool availability, scripting, or dynamically invoking external programs.
//!
//! # Inputs
//! - `in_command_string`: The name of the command to search for (string).
//!
//! # Outputs
//! - `Result<String, String>`: The full path to the executable if found, or an error message if not found.
//!
//! # Example
//! If `in_command_string` is "python", the output will be the path to the Python executable, such as "/usr/bin/python" or "C:\Python39\python.exe".
//! If the command is not found, the output will be an error message.
//!
//! # Notes
//! On Windows, this node uses the `where` command; on Unix-like systems, it uses `which`.
//! The output may include multiple paths separated by newlines; only the first is returned.
//! Use this node to check for dependencies or to resolve the location of tools before invoking them.
//!
//! # Errors
//! Returns an error if the command is not found or if the search fails.
//
 /// Find the path to an executable command.
fn @[pulsar_node_fn_id]@() -> Result<String, String> {
    use std::process::Command;
    
    let output = if cfg!(target_os = "windows") {
        Command::new("where")
            .arg(@[in_command_string]@)
            .output()
    } else {
        Command::new("which")
            .arg(@[in_command_string]@)
            .output()
    };
    
    match output {
        Ok(output) => {
            if output.status.success() {
                let path = String::from_utf8_lossy(&output.stdout).trim().to_string();
                if path.is_empty() {
                    Err(format!("Command '{}' not found", @[in_command_string]@))
                } else {
                    Ok(path)
                }
            } else {
                Err(format!("Command '{}' not found", @[in_command_string]@))
            }
        },
        Err(e) => Err(format!("Failed to search for command: {}", e)),
    }
}