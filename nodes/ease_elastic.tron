//! A pure function that applies elastic ease-out interpolation.

/// Apply elastic ease-out interpolation (rubber band effect).
fn @[pulsar_node_fn_id]@() -> f32 {
    let t = @[in_t_number]@.clamp(0.0, 1.0);
    
    if t == 0.0 {
        return 0.0;
    }
    if t == 1.0 {
        return 1.0;
    }
    
    let c4 = (2.0 * std::f32::consts::PI) / 3.0;
    2.0_f32.powf(-10.0 * t) * ((t * 10.0 - 0.75) * c4).sin() + 1.0
}