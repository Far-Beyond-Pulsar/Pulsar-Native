//! A node that maps a value from one numeric range to another.
//!
//! This node takes a value and maps it from an input range [from_min, from_max] to an output range [to_min, to_max].
//! Useful for normalization, scaling, UI sliders, and converting values between different domains.
//!
//! # Inputs
//! - `in_value_number`: The value to map.
//! - `in_from_min_number`: The minimum of the input range.
//! - `in_from_max_number`: The maximum of the input range.
//! - `in_to_min_number`: The minimum of the output range.
//! - `in_to_max_number`: The maximum of the output range.
//!
//! # Outputs
//! - The mapped value in the output range.
//!
//! # Example
//! If `in_value_number` is 5, `in_from_min_number` is 0, `in_from_max_number` is 10, `in_to_min_number` is 0, and `in_to_max_number` is 100, the output will be 50.
//!
//! # Notes
//! If the input range is zero (from_min == from_max), the output will be to_min. No clamping is performed on the output.

/// Map a value from one range to another.
fn @[pulsar_node_fn_id]@() -> f32 {
    let value = @[in_value_number]@;
    let from_min = @[in_from_min_number]@;
    let from_max = @[in_from_max_number]@;
    let to_min = @[in_to_min_number]@;
    let to_max = @[in_to_max_number]@;
    
    if from_max == from_min {
        to_min
    } else {
        to_min + (value - from_min) * (to_max - to_min) / (from_max - from_min)
    }
}