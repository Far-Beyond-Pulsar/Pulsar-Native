//! A node that applies back ease-out interpolation.
//!
//! This node computes a "back" ease-out interpolation, which overshoots the target value and then settles back.
//! Useful for creating natural, springy motion in animations and transitions.
//!
//! # Inputs
//! - `in_t_number`: The interpolation parameter (float, typically in [0, 1]).
//!
//! # Outputs
//! - The eased value (float), overshooting and then settling at 1.0.
//!
//! # Example
//! If `in_t_number` is 0.5, the output will be slightly greater than 0.5 due to the overshoot.
//!
//! # Notes
//! The output is clamped for t in [0, 1]. For t outside this range, the result may be extrapolated.
//! Use this node for effects that require a "back" or springy ease-out curve.

/// Apply back ease-out interpolation (overshoots then settles).
fn @[pulsar_node_fn_id]@() -> f32 {
    let t = @[in_t_number]@.clamp(0.0, 1.0);
    let c1 = 1.70158;
    let c3 = c1 + 1.0;

    1.0 + c3 * (t - 1.0).powi(3) + c1 * (t - 1.0).powi(2)
}