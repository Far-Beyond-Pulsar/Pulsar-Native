//! A node that executes only once until reset (like Unreal's DoOnce).
//!
//! This node ensures that the connected code executes only a single time until it is reset.
//! After the first execution, further triggers are ignored until the reset input is activated.
//!
//! # Inputs
//! - `in_reset_bool`: If true, resets the node so it can execute again.
//!
//! # Outputs
//! - Executes `pulsar_exec_then` only the first time, or after a reset.
//!
//! # Behavior
//! Uses a static atomic flag to track execution state. When reset, the flag is cleared and the node can execute again.
//!
//! # Example
//! If triggered repeatedly, the output will only execute once until reset.
//!
//! # Notes
//! Useful for initialization, one-time events, or gating logic that should not repeat until explicitly reset.
///
/// Execute only once until reset. Uses static state.
fn @[pulsar_node_fn_id]@() {
    use std::sync::atomic::{AtomicBool, Ordering};
    static EXECUTED: AtomicBool = AtomicBool::new(false);
    
    if @[in_reset_bool]@ {
        EXECUTED.store(false, Ordering::Relaxed);
        return;
    }
    
    if !EXECUTED.load(Ordering::Relaxed) {
        EXECUTED.store(true, Ordering::Relaxed);
        @[pulsar_exec_then]@
    }
}