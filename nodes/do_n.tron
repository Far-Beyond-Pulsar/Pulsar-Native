//! A node that executes a connected branch N times, then stops until reset.
//!
//! This node tracks the number of executions and only allows the connected branch to run up to N times.
//! After N executions, further triggers are ignored until the node is reset.
//!
//! # Inputs
//! - `in_n_number`: The maximum number of times to execute (integer).
//! - `in_reset_bool`: If true, resets the execution counter to zero.
//!
//! # Outputs
//! - Executes `pulsar_exec_then` branch up to N times.
//!
//! # Behavior
//! - Maintains an internal counter using a static atomic variable.
//! - When triggered, increments the counter and executes the branch if the count is less than N.
//! - If `in_reset_bool` is true, resets the counter and does not execute the branch.
//!
//! # Example
//! If `in_n_number` is 3, the branch will execute three times on consecutive triggers, then stop until reset.
//!
//! # Notes
//! Useful for limiting the number of times an action can occur, such as for initialization, retries, or one-shot events.
/// Execute N times then stop. Uses static state.
fn @[pulsar_node_fn_id]@() {
    use std::sync::atomic::{AtomicI32, Ordering};
    static COUNTER: AtomicI32 = AtomicI32::new(0);
    
    let max_count = @[in_n_number]@ as i32;
    
    if @[in_reset_bool]@ {
        COUNTER.store(0, Ordering::Relaxed);
        return;
    }
    
    let current = COUNTER.load(Ordering::Relaxed);
    if current < max_count {
        COUNTER.fetch_add(1, Ordering::Relaxed);
        @[pulsar_exec_then]@
    }
}