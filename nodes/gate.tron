//! A node that controls execution flow using an open/close gate (like Unreal's Gate).
//!
//! This node acts as a gate that can be opened or closed to allow or block execution of connected code.
//! The gate maintains its state internally and responds to open/close signals.
//!
//! # Inputs
//! - `in_open_bool`: If true, opens the gate (allows execution).
//! - `in_close_bool`: If true, closes the gate (blocks execution).
//!
//! # Outputs
//! - Executes `pulsar_exec_then` only if the gate is open.
//!
//! # Behavior
//! - The gate is controlled by static state. When opened, execution passes through; when closed, execution is blocked.
//! - Multiple open/close signals can be sent; the last signal determines the state.
//!
//! # Example
//! If `in_open_bool` is true, the gate opens and allows execution. If `in_close_bool` is true, the gate closes and blocks execution.
//!
//! # Notes
//! Useful for controlling flow in event graphs, gating triggers, or synchronizing logic.
//!
//! # Implementation
/// Control execution flow with an open/close gate.
fn @[pulsar_node_fn_id]@() {
    use std::sync::atomic::{AtomicBool, Ordering};
    static GATE_OPEN: AtomicBool = AtomicBool::new(false);

    if @[in_open_bool]@ {
        GATE_OPEN.store(true, Ordering::Relaxed);
    }

    if @[in_close_bool]@ {
        GATE_OPEN.store(false, Ordering::Relaxed);
    }

    if GATE_OPEN.load(Ordering::Relaxed) {
        @[pulsar_exec_then]@
    }
}