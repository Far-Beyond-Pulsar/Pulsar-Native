//! A node that executes a command with a timeout.

/// Execute a command with a timeout in seconds.
fn @[pulsar_node_fn_id]@() -> Result<String, String> {
    use std::process::{Command, Stdio};
    use std::time::Duration;
    
    let mut child = if cfg!(target_os = "windows") {
        Command::new("cmd")
            .args(["/C", @[in_command_string]@])
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()
    } else {
        Command::new("sh")
            .args(["-c", @[in_command_string]@])
            .stdout(Stdio::piped())
            .stderr(Stdio::piped())
            .spawn()
    };
    
    let mut child = match child {
        Ok(child) => child,
        Err(e) => return Err(format!("Failed to spawn process: {}", e)),
    };
    
    // Simple timeout simulation (not perfect but functional)
    std::thread::sleep(Duration::from_millis(100)); // Small delay to let process start
    
    match child.try_wait() {
        Ok(Some(status)) => {
            let output = child.wait_with_output().unwrap();
            if status.success() {
                Ok(String::from_utf8_lossy(&output.stdout).to_string())
            } else {
                Err(String::from_utf8_lossy(&output.stderr).to_string())
            }
        },
        Ok(None) => {
            // Process still running - for simplicity, we'll wait a bit more
            let timeout_secs = @[in_timeout_number]@ as u64;
            std::thread::sleep(Duration::from_secs(timeout_secs));
            
            match child.try_wait() {
                Ok(Some(status)) => {
                    let output = child.wait_with_output().unwrap();
                    if status.success() {
                        Ok(String::from_utf8_lossy(&output.stdout).to_string())
                    } else {
                        Err(String::from_utf8_lossy(&output.stderr).to_string())
                    }
                },
                _ => {
                    let _ = child.kill();
                    Err("Command timed out".to_string())
                }
            }
        },
        Err(e) => Err(format!("Error checking process status: {}", e)),
    }
}