//! A node that executes a shell command and returns the output.
//!
//! This node runs the specified shell command using the system shell and returns the command's standard output as a string.
//! Useful for automation, scripting, invoking external tools, or integrating with the operating system.
//!
//! # Inputs
//! - `in_command_string`: The shell command to execute (string).
//!
//! # Outputs
//! - `Result<String, String>`: The standard output of the command if successful, or an error message if the command fails.
//!
//! # Example
//! If `in_command_string` is "echo Hello", the output will be Ok("Hello\n").
//! If the command fails, the output will be Err with the error message.
//!
//! # Notes
//! On Windows, the command is executed using `cmd /C`. On Unix-like systems, it uses `sh -c`.
//! The output includes only the standard output. Standard error is returned as an error if the command fails.
//! Use this node with caution, as executing arbitrary shell commands can be a security risk.
//!
//! # Errors
//! Returns an error if the command fails to execute or returns a non-zero exit code.

/// Execute a shell command and return the output.
fn @[pulsar_node_fn_id]@() -> Result<String, String> {
    use std::process::Command;
    
    let output = if cfg!(target_os = "windows") {
        Command::new("cmd")
            .args(["/C", @[in_command_string]@])
            .output()
    } else {
        Command::new("sh")
            .args(["-c", @[in_command_string]@])
            .output()
    };
    
    match output {
        Ok(output) => {
            if output.status.success() {
                Ok(String::from_utf8_lossy(&output.stdout).to_string())
            } else {
                Err(String::from_utf8_lossy(&output.stderr).to_string())
            }
        },
        Err(e) => Err(format!("Failed to execute command: {}", e)),
    }
}