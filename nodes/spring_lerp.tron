//! A node that applies spring-based interpolation with damping.
//!
//! This node simulates a spring-damper system to interpolate smoothly between a current value and a target value.
//! It takes into account velocity, spring strength, damping, and delta time to produce natural, physically-inspired motion.
//! Useful for smooth transitions, UI animations, physics simulations, and procedural motion.
//!
//! # Inputs
//! - `in_current_number`: The current value (float).
//! - `in_target_number`: The target value to interpolate toward (float).
//! - `in_velocity_number`: The current velocity (float).
//! - `in_spring_strength_number`: The spring strength (float, higher values make the spring stiffer).
//! - `in_damping_number`: The damping factor (float, higher values dampen the motion more).
//! - `in_delta_time_number`: The time step for the simulation (float, typically in seconds).
//!
//! # Outputs
//! - The next value after applying spring interpolation (float).
//!
//! # Example
//! If `in_current_number` is 0.0, `in_target_number` is 10.0, `in_velocity_number` is 0.0, `in_spring_strength_number` is 5.0, `in_damping_number` is 0.2, and `in_delta_time_number` is 0.016, the output will be a value slightly closer to 10.0, simulating spring motion.
//!
//! # Notes
//! The output simulates a critically damped or underdamped spring depending on the parameters. Use this node for smooth, natural-feeling interpolation in UI or animation.

/// Apply spring-based interpolation with damping.
fn @[pulsar_node_fn_id]@() -> f32 {
    let current = @[in_current_number]@;
    let target = @[in_target_number]@;
    let velocity = @[in_velocity_number]@;
    let spring_strength = @[in_spring_strength_number]@;
    let damping = @[in_damping_number]@;
    let delta_time = @[in_delta_time_number]@;
    
    let force = (target - current) * spring_strength;
    let new_velocity = velocity + force * delta_time;
    let damped_velocity = new_velocity * (1.0 - damping * delta_time);
    
    current + damped_velocity * delta_time
}