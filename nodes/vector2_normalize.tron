//! A node that normalizes a 2D vector to unit length.
//!
//! This node takes a 2D vector as input and returns a new vector in the same direction but with a magnitude (length) of 1.
//! If the input vector has zero length, the output will be (0.0, 0.0).
//!
//! # Inputs
//! - `in_vector_vector2`: The input 2D vector as a tuple (x, y).
//!
//! # Outputs
//! - `(f32, f32)`: The normalized 2D vector.
//!
//! # Example
//! If `in_vector_vector2` is (3.0, 4.0), the output will be (0.6, 0.8).
//! If `in_vector_vector2` is (0.0, 0.0), the output will be (0.0, 0.0).
//!
//! # Notes
//! Normalization is useful for direction calculations and when you need a unit vector.
//!
//! This node takes a 2D vector as input and returns a new vector in the same direction but with a magnitude (length) of 1.
//! If the input vector has zero length, the output will be (0.0, 0.0).
//!
//! # Inputs
//! - `in_vector_vector2`: The input 2D vector as a tuple (x, y).
//!
//! # Outputs
//! - `(f32, f32)`: The normalized 2D vector.
//!
//! # Example
//! If `in_vector_vector2` is (3.0, 4.0), the output will be (0.6, 0.8).
//! If `in_vector_vector2` is (0.0, 0.0), the output will be (0.0, 0.0).
//!
//! # Notes
//! Normalization is useful for direction calculations and when you need a unit vector.
//!
//! This node takes a 2D vector as input and returns a new vector in the same direction but with a magnitude (length) of 1.
//! If the input vector has zero length, the output will be (0.0, 0.0).
//!
//! # Inputs
//! - `in_vector_vector2`: The input 2D vector as a tuple (x, y).
//!
//! # Outputs
//! - `(f32, f32)`: The normalized 2D vector.
//!
//! # Example
//! If `in_vector_vector2` is (3.0, 4.0), the output will be (0.6, 0.8).
//! If `in_vector_vector2` is (0.0, 0.0), the output will be (0.0, 0.0).
//!
//! # Notes
//! Normalization is useful for direction calculations and when you need a unit vector.

/// Normalize a 2D vector to unit length.
fn @[pulsar_node_fn_id]@() -> (f32, f32) {
    let (x, y) = @[in_vector_vector2]@;
    let magnitude = (x * x + y * y).sqrt();
    if magnitude > 0.0 {
        (x / magnitude, y / magnitude)
    } else {
        (0.0, 0.0)
    }
}