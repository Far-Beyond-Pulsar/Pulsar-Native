//! A node that adds two 2D vectors component-wise.
//!
//! This node takes two 2D vectors as input and returns a new 2D vector where each component
//! is the sum of the corresponding components of the input vectors.
//!
//! # Inputs
//! - `in_a_vector2`: The first 2D vector (tuple of two numbers).
//! - `in_b_vector2`: The second 2D vector (tuple of two numbers).
//!
//! # Outputs
//! - `(f32, f32)`: The resulting 2D vector after addition.
//!
//! # Example
//! If `in_a_vector2` is (1.0, 2.0) and `in_b_vector2` is (3.0, 4.0), the output will be (4.0, 6.0).
//!
//! # Notes
//! This operation is performed component-wise: (x1 + x2, y1 + y2).
//!
//! This node takes two 2D vectors as input and returns a new 2D vector where each component
//! is the sum of the corresponding components of the input vectors.
//!
//! # Inputs
//! - `in_a_vector2`: The first 2D vector (tuple of two numbers).
//! - `in_b_vector2`: The second 2D vector (tuple of two numbers).
//!
//! # Outputs
//! - `(f32, f32)`: The resulting 2D vector after addition.
//!
//! # Example
//! If `in_a_vector2` is (1.0, 2.0) and `in_b_vector2` is (3.0, 4.0), the output will be (4.0, 6.0).
//!
//! # Notes
//! This operation is performed component-wise: (x1 + x2, y1 + y2).

/// Add two 2D vectors.
fn @[pulsar_node_fn_id]@() -> (f32, f32) {
    let (x1, y1) = @[in_a_vector2]@;
    let (x2, y2) = @[in_b_vector2]@;
    (x1 + x2, y1 + y2)
}