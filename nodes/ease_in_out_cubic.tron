//! A node that applies cubic ease-in-out interpolation.
//!
//! This node computes a cubic ease-in-out curve, which starts and ends slowly but accelerates in the middle.
//! Useful for smooth transitions, animations, and UI effects.
//!
//! # Inputs
//! - `in_t_number`: The interpolation parameter (float, typically in [0, 1]).
//!
//! # Outputs
//! - The eased value (float) between 0 and 1.
//!
//! # Example
//! If `in_t_number` is 0.0, the output will be 0.0. If `in_t_number` is 1.0, the output will be 1.0.
//! If `in_t_number` is 0.5, the output will be 0.5.
//!
//! # Notes
//! The curve is symmetric and smooth, ideal for natural motion and transitions.
//!
//! # Behavior
//! The output is calculated as:
//! - If t < 0.5: 4 * t^3
//! - Else: 1 + ((2 * t - 2)^3) / 2
//!
/// Apply cubic ease-in-out interpolation (very slow start and end).
fn @[pulsar_node_fn_id]@() -> f32 {
    let t = @[in_t_number]@.clamp(0.0, 1.0);
    if t < 0.5 {
        4.0 * t * t * t
    } else {
        let f = 2.0 * t - 2.0;
        1.0 + f * f * f / 2.0
    }
}