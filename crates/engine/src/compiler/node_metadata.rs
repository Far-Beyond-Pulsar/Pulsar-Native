//! # Node Metadata Extraction
//!
//! Provides access to blueprint node metadata through the auto-generated registry.
//!
//! Instead of parsing source files, this module now uses the compile-time registry
//! generated by the `#[blueprint]` macro in `pulsar_std`.

use std::collections::HashMap;

/// Re-export types from pulsar_std for compatibility
pub use pulsar_std::{NodeMetadata, NodeParameter, NodeTypes, get_all_nodes, get_node_by_name};

/// Extract all node metadata from the registry
///
/// This replaces the old source-parsing approach with direct access to the
/// pre-built registry.
pub fn extract_node_metadata() -> Result<HashMap<String, NodeMetadata>, String> {
    let nodes = pulsar_std::get_all_nodes();

    Ok(nodes
        .iter()
        .map(|node| (node.name.to_string(), node.clone()))
        .collect())
}

/// Get nodes organized by category
pub fn get_nodes_by_category() -> HashMap<String, Vec<&'static NodeMetadata>> {
    let mut categorized: HashMap<String, Vec<&'static NodeMetadata>> = HashMap::new();

    for node in pulsar_std::get_all_nodes() {
        categorized
            .entry(node.category.to_string())
            .or_insert_with(Vec::new)
            .push(node);
    }

    categorized
}

/// Get all available node categories
pub fn get_categories() -> Vec<String> {
    pulsar_std::get_all_categories()
        .iter()
        .map(|s| s.to_string())
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_extract_metadata() {
        let metadata = extract_node_metadata().unwrap();
        assert!(!metadata.is_empty(), "Should have registered nodes");

        // Check that common nodes exist
        assert!(metadata.contains_key("add"), "Should have 'add' node");
        assert!(metadata.contains_key("branch"), "Should have 'branch' node");
    }

    #[test]
    fn test_categorization() {
        let by_category = get_nodes_by_category();
        assert!(!by_category.is_empty(), "Should have at least one category");

        // Math category should exist and have nodes
        if let Some(math_nodes) = by_category.get("Math") {
            assert!(!math_nodes.is_empty(), "Math category should have nodes");
        }
    }
}
