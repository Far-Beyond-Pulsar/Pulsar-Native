warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\engine\Cargo.toml
workspace: C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\Cargo.toml
warning: unused import: `NodeTypes`
  --> crates\pulsar_std\src\flow.rs:17:24
   |
17 | use crate::{blueprint, NodeTypes, exec_output};
   |                        ^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `NodeTypes`
 --> crates\pulsar_std\src\rluanode\lua.rs:1:23
  |
1 | use crate::{blueprint,NodeTypes,exec_output};
  |                       ^^^^^^^^^

warning: function `templateLua` should have a snake case name
  --> crates\pulsar_std\src\rluanode\lua.rs:13:8
   |
13 | pub fn templateLua() -> String {
   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `template_lua`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: `pulsar_std` (lib) generated 3 warnings (run `cargo fix --lib -p pulsar_std` to apply 2 suggestions)
warning: unexpected `cfg` condition value: `webview`
  --> crates\ui\src\lib.rs:63:7
   |
63 | #[cfg(feature = "webview")]
   |       ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `decimal`, `inspector`, and `tree-sitter-languages`
   = help: consider adding `webview` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `webview`
  --> crates\ui\src\lib.rs:68:7
   |
68 | #[cfg(feature = "webview")]
   |       ^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `decimal`, `inspector`, and `tree-sitter-languages`
   = help: consider adding `webview` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: variant `iOSSettings` should have an upper camel case name
    --> crates\ui\src\icon.rs:1450:5
     |
1450 |     iOSSettings,
     |     ^^^^^^^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `IOssettings`
     |
     = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `ARchive_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1451:5
     |
1451 |     ARchive_dark,
     |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `ArchiveDark`

warning: variant `Android_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1453:5
     |
1453 |     Android_dark,
     |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `AndroidDark`

warning: variant `Anytype_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1455:5
     |
1455 |     Anytype_dark,
     |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `AnytypeDark`

warning: variant `Build_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1457:5
     |
1457 |     Build_dark,
     |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `BuildDark`

warning: variant `CSS_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1459:5
     |
1459 |     CSS_dark,
     |     ^^^^^^^^ help: convert the identifier to upper camel case: `CssDark`

warning: variant `Dependencyanalyzer_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1461:5
     |
1461 |     Dependencyanalyzer_dark,
     |     ^^^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `DependencyanalyzerDark`

warning: variant `Image_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1464:5
     |
1464 |     Image_dark,
     |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `ImageDark`

warning: variant `JSON_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1466:5
     |
1466 |     JSON_dark,
     |     ^^^^^^^^^ help: convert the identifier to upper camel case: `JsonDark`

warning: variant `Javascript_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1468:5
     |
1468 |     Javascript_dark,
     |     ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `JavascriptDark`

warning: variant `Linux_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1469:5
     |
1469 |     Linux_dark,
     |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `LinuxDark`

warning: variant `Makefile_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1471:5
     |
1471 |     Makefile_dark,
     |     ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `MakefileDark`

warning: variant `Microsoftwindows_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1473:5
     |
1473 |     Microsoftwindows_dark,
     |     ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `MicrosoftwindowsDark`

warning: variant `Rebuild_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1475:5
     |
1475 |     Rebuild_dark,
     |     ^^^^^^^^^^^^ help: convert the identifier to upper camel case: `RebuildDark`

warning: variant `Rustfile_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1477:5
     |
1477 |     Rustfile_dark,
     |     ^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `RustfileDark`

warning: variant `Shell_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1479:5
     |
1479 |     Shell_dark,
     |     ^^^^^^^^^^ help: convert the identifier to upper camel case: `ShellDark`

warning: variant `Sql_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1481:5
     |
1481 |     Sql_dark,
     |     ^^^^^^^^ help: convert the identifier to upper camel case: `SqlDark`

warning: variant `Toml_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1483:5
     |
1483 |     Toml_dark,
     |     ^^^^^^^^^ help: convert the identifier to upper camel case: `TomlDark`

warning: variant `Typescript_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1485:5
     |
1485 |     Typescript_dark,
     |     ^^^^^^^^^^^^^^^ help: convert the identifier to upper camel case: `TypescriptDark`

warning: variant `XML_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1487:5
     |
1487 |     XML_dark,
     |     ^^^^^^^^ help: convert the identifier to upper camel case: `XmlDark`

warning: variant `Yaml_dark` should have an upper camel case name
    --> crates\ui\src\icon.rs:1489:5
     |
1489 |     Yaml_dark,
     |     ^^^^^^^^^ help: convert the identifier to upper camel case: `YamlDark`

warning: unused import: `EntityInputHandler`
 --> crates\ui\src\input\lsp\completions.rs:2:29
  |
2 | use gpui::{Context, Entity, EntityInputHandler, Task, Window};
  |                             ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `MouseMoveEvent`
 --> crates\ui\src\input\lsp\hover.rs:2:26
  |
2 | use gpui::{App, Context, MouseMoveEvent, Point, Pixels, Task, Window};
  |                          ^^^^^^^^^^^^^^

warning: unused import: `CompletionTriggerKind`
 --> crates\ui\src\input\lsp\autocomplete.rs:6:92
  |
6 | use lsp_types::{CompletionContext, CompletionItem, CompletionItemKind, CompletionResponse, CompletionTriggerKind, InsertTextFormat};
  |                                                                                            ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RopeExt`
  --> crates\ui\src\input\lsp\autocomplete.rs:11:32
   |
11 | use crate::input::{InputState, RopeExt};
   |                                ^^^^^^^

warning: unused imports: `Completion`, `GotoDefinitionParams`, `GotoDefinitionResponse`, `GotoDefinition`, `HoverParams`, `HoverRequest`, and `Position as LspPosition`
  --> crates\ui\src\input\lsp\rust_analyzer.rs:7:15
   |
7  |     request::{Completion, GotoDefinition, HoverRequest},
   |               ^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^
8  |     CompletionContext, CompletionItem, CompletionParams, CompletionResponse,
9  |     GotoDefinitionParams, GotoDefinitionResponse, Hover, HoverParams,
   |     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^         ^^^^^^^^^^^
10 |     Position as LspPosition, TextDocumentIdentifier, TextDocumentPositionParams,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::rc::Rc`
  --> crates\ui\src\input\lsp\rust_analyzer.rs:16:5
   |
16 | use std::rc::Rc;
   |     ^^^^^^^^^^^

warning: unused import: `HighlightStyle`
 --> crates\ui\src\input\popovers\completion_menu.rs:5:77
  |
5 |     AppContext, Bounds, Context, DismissEvent, Empty, Entity, EventEmitter, HighlightStyle,
  |                                                                             ^^^^^^^^^^^^^^

warning: unused import: `StyledExt`
  --> crates\ui\src\input\popovers\diagnostic_popover.rs:15:26
   |
15 |     v_flex, ActiveTheme, StyledExt,
   |                          ^^^^^^^^^

warning: unused import: `StyledExt`
  --> crates\ui\src\input\popovers\hover_popover.rs:10:26
   |
10 |     v_flex, ActiveTheme, StyledExt,
   |                          ^^^^^^^^^

warning: unused variable: `view`
   --> crates\ui\src\input\popovers\completion_menu.rs:534:17
    |
534 |             let view = cx.entity();
    |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_view`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `start`
   --> crates\ui\src\input\lsp\completions.rs:104:9
    |
104 |         start: usize,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`

warning: unused variable: `has_lsp`
  --> crates\ui\src\input\lsp\autocomplete.rs:66:13
   |
66 |         let has_lsp = self.lsp_provider.is_some();
   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_has_lsp`

warning: unused variable: `offset`
   --> crates\ui\src\input\lsp\autocomplete.rs:163:9
    |
163 |         offset: usize,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_offset`

warning: unused variable: `language`
   --> crates\ui\src\input\lsp\rust_analyzer.rs:433:21
    |
433 |         let (value, language) = match word {
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: fields `double_buffer`, `metrics`, `last_width`, and `last_height` are never read
   --> crates\ui\src\viewport_final.rs:268:5
    |
267 | pub struct Viewport {
    |            -------- fields in this struct
268 |     double_buffer: Arc<DoubleBuffer>,
    |     ^^^^^^^^^^^^^
269 |     shared_texture: Arc<Mutex<Option<Arc<RenderImage>>>>, // Pre-made texture ready to swap
270 |     metrics: ViewportMetrics,
    |     ^^^^^^^
271 |     focus_handle: FocusHandle,
272 |     last_width: u32,
    |     ^^^^^^^^^^
273 |     last_height: u32,
    |     ^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `workspace_root` is never read
  --> crates\ui\src\input\lsp\rust_analyzer.rs:26:5
   |
22 | pub struct RustAnalyzerClient {
   |            ------------------ field in this struct
...
26 |     workspace_root: PathBuf,
   |     ^^^^^^^^^^^^^^

warning: method `set_query` is never used
  --> crates\ui\src\input\popovers\completion_menu.rs:60:8
   |
35 | impl ContextMenuDelegate {
   | ------------------------ method in this implementation
...
60 |     fn set_query(&mut self, query: SharedString) {
   |        ^^^^^^^^^

warning: methods `update_query` and `update_query_only` are never used
   --> crates\ui\src\input\popovers\completion_menu.rs:454:19
    |
237 | impl CompletionMenu {
    | ------------------- methods in this implementation
...
454 |     pub(crate) fn update_query(&mut self, start_offset: usize, query: impl Into<SharedString>) {
    |                   ^^^^^^^^^^^^
...
462 |     pub(crate) fn update_query_only(&mut self, query: impl Into<SharedString>, cx: &mut Context<Self>) {
    |                   ^^^^^^^^^^^^^^^^^

warning: associated function `calculate_buffer_zone` is never used
   --> crates\ui\src\input\text_input.rs:259:8
    |
45  | impl TextInput {
    | -------------- associated function in this implementation
...
259 |     fn calculate_buffer_zone(visible_lines: usize, total_lines: usize) -> usize {
    |        ^^^^^^^^^^^^^^^^^^^^^

warning: methods `resolve_child` and `resolve_children` are never used
   --> crates\ui\src\json_ui\parser.rs:111:8
    |
11  | impl UiParser {
    | ------------- methods in this implementation
...
111 |     fn resolve_child(&mut self, child: &UiChild) -> Result<UiChild, Box<dyn std::error::Error>> {
    |        ^^^^^^^^^^^^^
...
138 |     fn resolve_children(&mut self, children: &[UiChild]) -> Result<Vec<UiChild>, Box<dyn std::error::Error>> {
    |        ^^^^^^^^^^^^^^^^

warning: `gpui-component` (lib) generated 43 warnings (run `cargo fix --lib -p gpui-component` to apply 9 suggestions)
   Compiling pulsar_engine v0.1.30 (C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\engine)
error[E0425]: cannot find value `window` in this scope
  --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:84:25
   |
81 |                 .tooltip(move |_window, _cx| {
   |                                ------- `_window` defined here
...
84 |                         window, 
   |                         ^^^^^^
   |
help: the leading underscore in `_window` marks it as unused, consider renaming it to `window`
   |
81 -                 .tooltip(move |_window, _cx| {
81 +                 .tooltip(move |window, _cx| {
   |

warning: unused imports: `NodeParameter`, `get_all_nodes`, and `get_node_by_name`
  --> crates\engine\src\compiler\node_metadata.rs:11:36
   |
11 | pub use pulsar_std::{NodeMetadata, NodeParameter, NodeType, get_all_nodes, get_node_by_name};
   |                                    ^^^^^^^^^^^^^            ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `NodeInstance`
  --> crates\engine\src\compiler\data_resolver.rs:12:37
   |
12 | use crate::graph::{GraphDescription,NodeInstance,ConnectionType};
   |                                     ^^^^^^^^^^^^

warning: unused import: `StmtMacro`
  --> crates\engine\src\compiler\ast_utils.rs:11:43
   |
11 |     Block, Expr, ExprMacro, ItemFn, Stmt, StmtMacro,
   |                                           ^^^^^^^^^

warning: unused import: `ConnectionType`
  --> crates\engine\src\compiler\code_generator.rs:16:20
   |
16 | use crate::graph::{ConnectionType, GraphDescription, NodeInstance};
   |                    ^^^^^^^^^^^^^^

warning: unused import: `Sizable as _`
 --> crates\engine\src\ui\app.rs:5:60
  |
5 |     h_flex, v_flex, ActiveTheme as _, IconName, StyledExt, Sizable as _,
  |                                                            ^^^^^^^^^^^^

warning: unused import: `input::TextInput`
 --> crates\engine\src\ui\entry_screen.rs:5:25
  |
5 |     progress::Progress, input::TextInput,
  |                         ^^^^^^^^^^^^^^^^

warning: unused imports: `ButtonVariant` and `popup_menu::PopupMenu`
 --> crates\engine\src\ui\file_manager_drawer.rs:3:22
  |
3 |     button::{Button, ButtonVariant, ButtonVariants as _},
  |                      ^^^^^^^^^^^^^
...
7 |     popup_menu::PopupMenu,
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Serialize`
  --> crates\engine\src\ui\file_manager_drawer.rs:12:26
   |
12 | use serde::{Deserialize, Serialize};
   |                          ^^^^^^^^^

warning: unused import: `StyledExt`
 --> crates\engine\src\ui\panels\blueprint_editor2\toolbar.rs:5:23
  |
5 |     ActiveTheme as _, StyledExt,
  |                       ^^^^^^^^^

warning: unused imports: `PinType` and `VirtualizationStats`
 --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:8:49
  |
8 | use super::{BlueprintNode, BlueprintGraph, Pin, PinType, NodeType, Connection, VirtualizationStats};
  |                                                 ^^^^^^^                        ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `AxisExt as _`, `DropdownState`, `Icon`, `SearchableVec`, and `input::InputState`
 --> crates\engine\src\ui\panels\blueprint_editor2\variables.rs:4:26
  |
4 |     dropdown::{Dropdown, DropdownState, DropdownItem, SearchableVec},
  |                          ^^^^^^^^^^^^^                ^^^^^^^^^^^^^
5 |     input::InputState,
  |     ^^^^^^^^^^^^^^^^^
6 |     h_flex, v_flex,
7 |     ActiveTheme as _, StyledExt, Icon, IconName, AxisExt as _,
  |                                  ^^^^            ^^^^^^^^^^^^

warning: unused import: `super::*`
  --> crates\engine\src\ui\panels\blueprint_editor2\variables.rs:10:5
   |
10 | use super::*;
   |     ^^^^^^^^

warning: unused import: `crate::graph::PinInstance`
 --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:1:5
  |
1 | use crate::graph::PinInstance;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `InputEvent`, `StyledExt`, and `context_menu::ContextMenuExt`
 --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:5:5
  |
5 |     context_menu::ContextMenuExt,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |     dock::{Panel, PanelEvent},
7 |     input::{InputEvent, InputState},
  |             ^^^^^^^^^^
8 |     resizable::{h_resizable, resizable_panel, ResizableState},
9 |     v_flex, ActiveTheme as _, PixelsExt, StyledExt,
  |                                          ^^^^^^^^^

warning: unused import: `GraphDescription`
  --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:20:47
   |
20 | use crate::graph::{DataType as GraphDataType, GraphDescription};
   |                                               ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:585:13
    |
585 |         use std::collections::HashMap;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NodeCategory`
  --> crates\engine\src\ui\panels\blueprint_editor2\node_creation_menu.rs:13:30
   |
13 | use super::{NodeDefinitions, NodeCategory, NodeDefinition, BlueprintNode};
   |                              ^^^^^^^^^^^^

warning: unused import: `crate::graph::Position`
  --> crates\engine\src\ui\panels\blueprint_editor2\node_creation_menu.rs:14:5
   |
14 | use crate::graph::Position;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `StyledExt`
 --> crates\engine\src\ui\panels\blueprint_editor2\hoverable_tooltip.rs:7:64
  |
7 | use gpui_component::{v_flex, ActiveTheme as _, text::TextView, StyledExt};
  |                                                                ^^^^^^^^^

warning: unused import: `PinStyle`
  --> crates\engine\src\ui\panels\blueprint_editor2\mod.rs:16:30
   |
16 | use crate::graph::{DataType, PinStyle};
   |                              ^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
 --> crates\engine\src\ui\panels\daw_editor\asset_manager.rs:7:5
  |
7 | use tokio::sync::RwLock;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> crates\engine\src\ui\panels\daw_editor\audio_graph.rs:5:5
  |
5 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `AudioMessage`
 --> crates\engine\src\ui\panels\daw_editor\audio_service.rs:6:44
  |
6 | use super::real_time_audio::{AudioCommand, AudioMessage, RealTimeAudio};
  |                                            ^^^^^^^^^^^^

warning: unused import: `PathBuf`
 --> crates\engine\src\ui\panels\daw_editor\project.rs:5:23
  |
5 | use std::path::{Path, PathBuf};
  |                       ^^^^^^^

warning: unused imports: `audio_types::*` and `project::DawProject`
 --> crates\engine\src\ui\panels\daw_editor\ui\panel.rs:5:49
  |
5 | use super::super::{audio_service::AudioService, audio_types::*, project::DawProject};
  |                                                 ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `StyledExt`
 --> crates\engine\src\ui\panels\daw_editor\ui\panel.rs:8:38
  |
8 | use gpui_component::{v_flex, h_flex, StyledExt, ActiveTheme};
  |                                      ^^^^^^^^^

warning: unused imports: `Sizable`, `button::*`, and `scroll::Scrollable`
  --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:10:5
   |
10 |     button::*, h_flex, v_flex, Icon, IconName, Sizable, StyledExt, ActiveTheme,
   |     ^^^^^^^^^                                  ^^^^^^^
11 |     scroll::Scrollable,
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `IconName`, `Icon`, `SliderState`, `Slider`, and `scroll::Scrollable`
  --> crates\engine\src\ui\panels\daw_editor\ui\mixer.rs:9:32
   |
9  |     button::*, h_flex, v_flex, Icon, IconName, Sizable, StyledExt, ActiveTheme,
   |                                ^^^^  ^^^^^^^^
10 |     slider::{Slider, SliderState}, scroll::Scrollable,
   |              ^^^^^^  ^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^

warning: unused import: `gpui::prelude::FluentBuilder`
 --> crates\engine\src\ui\panels\daw_editor\ui\inspector.rs:7:5
  |
7 | use gpui::prelude::FluentBuilder;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `IconName` and `Icon`
 --> crates\engine\src\ui\panels\daw_editor\ui\inspector.rs:9:32
  |
9 |     button::*, h_flex, v_flex, Icon, IconName, Sizable, StyledExt, ActiveTheme,
  |                                ^^^^  ^^^^^^^^

warning: unused imports: `scroll::Scrollable` and `tooltip::Tooltip`
  --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:10:27
   |
10 |     Selectable, input::*, scroll::Scrollable, divider::Divider, tooltip::Tooltip,
   |                           ^^^^^^^^^^^^^^^^^^                    ^^^^^^^^^^^^^^^^

warning: unused import: `v_flex`
 --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:9:24
  |
9 |     button::*, h_flex, v_flex, Icon, IconName, Sizable, StyledExt, ActiveTheme, Disableable,
  |                        ^^^^^^

warning: unused imports: `SliderState` and `Slider`
  --> crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:10:26
   |
10 |     Selectable, slider::{Slider, SliderState}, tooltip::Tooltip,
   |                          ^^^^^^  ^^^^^^^^^^^

warning: unused import: `gpui::prelude::FluentBuilder`
 --> crates\engine\src\ui\panels\daw_editor\ui\clip_editor.rs:7:5
  |
7 | use gpui::prelude::FluentBuilder;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `StyledExt`
 --> crates\engine\src\ui\panels\daw_editor\ui\clip_editor.rs:8:30
  |
8 | use gpui_component::{v_flex, StyledExt, ActiveTheme};
  |                              ^^^^^^^^^

warning: unused import: `audio_types::*`
  --> crates\engine\src\ui\panels\daw_editor\mod.rs:18:9
   |
18 | pub use audio_types::*;
   |         ^^^^^^^^^^^^^^

warning: unused imports: `AudioEvent`, `EcsAudioBridge`, and `TrackState`
  --> crates\engine\src\ui\panels\daw_editor\mod.rs:19:27
   |
19 | pub use ecs_integration::{AudioEvent, EcsAudioBridge, TrackState};
   |                           ^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `DawProject`, `ExportFormat`, and `create_demo_project`
  --> crates\engine\src\ui\panels\daw_editor\mod.rs:20:19
   |
20 | pub use project::{DawProject, ExportFormat, create_demo_project};
   |                   ^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `h_flex`, `h_resizable`, and `resizable_panel`
 --> crates\engine\src\ui\panels\material_editor.rs:4:17
  |
4 |     resizable::{h_resizable, resizable_panel, ResizableState},
  |                 ^^^^^^^^^^^  ^^^^^^^^^^^^^^^
5 |     h_flex, v_flex,
  |     ^^^^^^

warning: unused import: `text::TextView`
 --> crates\engine\src\ui\panels\script_editor\text_editor.rs:6:5
  |
6 |     text::TextView,
  |     ^^^^^^^^^^^^^^

warning: unused import: `App`
 --> crates\engine\src\ui\panels\script_editor\autocomplete_integration.rs:4:12
  |
4 | use gpui::{App, Context, Entity, Window};
  |            ^^^

warning: unused import: `prelude::FluentBuilder`
  --> crates\engine\src\ui\panels\script_editor\mod.rs:10:15
   |
10 | use gpui::{*, prelude::FluentBuilder};
   |               ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `v_resizable`
  --> crates\engine\src\ui\panels\script_editor\mod.rs:13:30
   |
13 |     resizable::{h_resizable, v_resizable, resizable_panel, ResizableState},
   |                              ^^^^^^^^^^^

warning: unused import: `material_editor::MaterialEditorPanel`
  --> crates\engine\src\ui\panels\mod.rs:10:9
   |
10 | pub use material_editor::MaterialEditorPanel;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `StyledExt`
 --> crates\engine\src\ui\problems_drawer.rs:9:49
  |
9 |     h_flex, v_flex, ActiveTheme as _, IconName, StyledExt, Sizable as _,
  |                                                 ^^^^^^^^^

warning: unused imports: `ButtonVariant` and `h_flex`
 --> crates\engine\src\ui\project_selector.rs:3:22
  |
3 |     button::{Button, ButtonVariant, ButtonVariants as _},
  |                      ^^^^^^^^^^^^^
4 |     h_flex, v_flex, ActiveTheme as _, StyledExt,
  |     ^^^^^^

warning: unnecessary parentheses around assigned value
   --> crates\engine\src\ui\rainbow_engine_final.rs:113:21
    |
113 |         let wave1 = ((x * 8.0 + time * 2.0).sin() * 0.5 + 0.5);
    |                     ^                                        ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
113 -         let wave1 = ((x * 8.0 + time * 2.0).sin() * 0.5 + 0.5);
113 +         let wave1 = (x * 8.0 + time * 2.0).sin() * 0.5 + 0.5;
    |

warning: unnecessary parentheses around assigned value
   --> crates\engine\src\ui\rainbow_engine_final.rs:114:21
    |
114 |         let wave2 = ((y * 6.0 + time * 1.5).sin() * 0.5 + 0.5);
    |                     ^                                        ^
    |
help: remove these parentheses
    |
114 -         let wave2 = ((y * 6.0 + time * 1.5).sin() * 0.5 + 0.5);
114 +         let wave2 = (y * 6.0 + time * 1.5).sin() * 0.5 + 0.5;
    |

warning: unused imports: `App`, `Entity`, and `Task`
 --> crates\engine\src\ui\rust_analyzer_manager.rs:2:12
  |
2 | use gpui::{App, Context, Entity, EventEmitter, Task, Window};
  |            ^^^           ^^^^^^                ^^^^

warning: unused import: `crate::settings::EngineSettings`
 --> crates\engine\src\ui\settings_window.rs:1:5
  |
1 | use crate::settings::EngineSettings;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ButtonVariants`, `Button`, `IconName`, `Icon`, and `h_flex`
 --> crates\engine\src\ui\settings_window.rs:5:14
  |
5 |     button::{Button, ButtonVariants},
  |              ^^^^^^  ^^^^^^^^^^^^^^
6 |     h_flex, v_flex, Icon, IconName, ActiveTheme, TitleBar,
  |     ^^^^^^          ^^^^  ^^^^^^^^

warning: unused import: `std::path::PathBuf`
 --> crates\engine\src\ui\settings_window.rs:8:5
  |
8 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `PathBuf`
 --> crates\engine\src\recent_projects.rs:2:23
  |
2 | use std::path::{Path, PathBuf};
  |                       ^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> crates\engine\src\themes.rs:13:13
   |
13 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused variable: `window`
   --> crates\engine\src\ui\app.rs:597:58
    |
597 | ...                   cx.listener(|app, _, window, cx| {
    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `problems_open`
   --> crates\engine\src\ui\app.rs:664:48
    |
664 |     fn render_footer(&self, drawer_open: bool, problems_open: bool, cx: &mut Context<Self>) -> impl IntoElement {
    |                                                ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_problems_open`

warning: unused variable: `window`
   --> crates\engine\src\ui\file_manager_drawer.rs:742:26
    |
742 |     fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:304:40
    |
304 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:304:48
    |
304 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:325:40
    |
325 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:325:48
    |
325 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:342:40
    |
342 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:342:48
    |
342 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:358:40
    |
358 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:358:48
    |
358 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:377:40
    |
377 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:377:48
    |
377 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:395:40
    |
395 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:395:48
    |
395 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:410:40
    |
410 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:410:48
    |
410 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\menu.rs:427:40
    |
427 |                     .popup_menu(|this, window, cx| {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\menu.rs:427:48
    |
427 |                     .popup_menu(|this, window, cx| {
    |                                                ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `event`
  --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:72:78
   |
72 |             .on_mouse_down(gpui::MouseButton::Left, cx.listener(move |panel, event, window, cx| {
   |                                                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `cx`
  --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:90:70
   |
90 |                 cx.listener(|panel, event: &MouseDownEvent, _window, cx| {
   |                                                                      ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `panel`
   --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:579:9
    |
579 |         panel: &BlueprintEditorPanel,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_panel`

warning: unused variable: `event`
   --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:959:42
    |
959 |                 cx.listener(move |panel, event: &MouseDownEvent, _window, cx| {
    |                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `cx`
    --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:1430:9
     |
1430 |         cx: &mut Context<BlueprintEditorPanel>,
     |         ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `cx`
   --> crates\engine\src\ui\panels\blueprint_editor2\node_creation_menu.rs:327:51
    |
327 |     fn render_highlighted_text(&self, text: &str, cx: &mut Context<Self>) -> impl IntoElement {
    |                                                   ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `duration_samples`
  --> crates\engine\src\ui\panels\daw_editor\asset_manager.rs:86:17
   |
86 |             let duration_samples = reader.duration() as usize;
   |                 ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_duration_samples`

warning: unused variable: `tempo`
  --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:31:9
   |
31 |     let tempo = state.project.as_ref().map(|p| p.transport.tempo).unwrap_or(120.0);
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_tempo`

warning: unused variable: `zoom`
  --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:32:9
   |
32 |     let zoom = state.viewport.zoom;
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_zoom`

error[E0599]: no method named `overflow_scroll` found for struct `gpui::Div` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:163:18
    |
160 | /             div()
161 | |                 .flex_1()
162 | |                 .h_full()
163 | |                 .overflow_scroll()
    | |                 -^^^^^^^^^^^^^^^ method not found in `gpui::Div`
    | |_________________|
    |

error[E0308]: `match` arms have incompatible types
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:167:50
    |
165 |                       let delta = match event.delta {
    |  _________________________________-
166 | |                         ScrollDelta::Pixels(p) => p,
    | |                                                   - this is found to be of type `gpui::Point<gpui::Pixels>`
167 | |                         ScrollDelta::Lines(l) => gpui::Point::new(l.x * 20.0, l.y * 20.0),
    | |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Point<Pixels>`, found `Point<f32>`
168 | |                     };
    | |_____________________- `match` arms have incompatible types
    |
    = note: expected struct `gpui::Point<gpui::Pixels>`
               found struct `gpui::Point<f32>`

error[E0599]: no method named `on_click` found for struct `gpui::Div` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:238:10
    |
228 | /     div()
229 | |         .size_full()
230 | |         .relative()
231 | |         .bg(if is_selected {
...   |
237 | |         .border_color(cx.theme().border)
238 | |         .on_click(cx.listener(move |this, event: &ClickEvent, _window, cx| {
    | |         -^^^^^^^^ method not found in `gpui::Div`
    | |_________|
    |

error[E0615]: attempted to take value of method `modifiers` on type `&gpui::ClickEvent`
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:239:53
    |
239 |             this.state.select_track(track_id, event.modifiers.shift);
    |                                                     ^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
239 |             this.state.select_track(track_id, event.modifiers().shift);
    |                                                              ++

error[E0599]: no method named `on_click` found for struct `gpui::Div` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:293:10
    |
276 | /     div()
277 | |         .absolute()
278 | |         .left(px(x))
279 | |         .top(px(4.0))
...   |
292 | |         .hover(|d| d.bg(cx.theme().accent.opacity(0.4)))
293 | |         .on_click(cx.listener(move |this, event: &ClickEvent, _window, cx| {
    | |         -^^^^^^^^ method not found in `gpui::Div`
    | |_________|
    |

error[E0615]: attempted to take value of method `modifiers` on type `&gpui::ClickEvent`
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:294:51
    |
294 |             this.state.select_clip(clip_id, event.modifiers.shift);
    |                                                   ^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
294 |             this.state.select_clip(clip_id, event.modifiers().shift);
    |                                                            ++

error[E0599]: no method named `color` found for struct `Icon` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:329:18
    |
327 | /             Icon::new(IconName::Activity)
328 | |                 .size_4()
329 | |                 .color(cx.theme().accent_foreground.opacity(0.3))
    | |_________________-^^^^^
    |
help: there is a method `text_color` with a similar name
    |
329 |                 .text_color(cx.theme().accent_foreground.opacity(0.3))
    |                  +++++

error[E0599]: no method named `pointer_events_none` found for struct `gpui::Div` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\timeline.rs:340:10
    |
337 | /     div()
338 | |         .absolute()
339 | |         .inset_0()
340 | |         .pointer_events_none()
    | |         -^^^^^^^^^^^^^^^^^^^ method not found in `gpui::Div`
    | |_________|
    |

error[E0277]: the trait bound `&std::string::String: gpui::IntoElement` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\mixer.rs:52:24
    |
52  |                 .child(&track.name)
    |                  ----- ^^^^^^^^^^^ the trait `gpui::IntoElement` is not implemented for `&std::string::String`
    |                  |
    |                  required by a bound introduced by this call
    |
note: required by a bound in `child`
   --> C:\Users\redst\.cargo\git\checkouts\zed-a70e2ad075855582\21e75b8\crates\gpui\src\element.rs:161:36
    |
161 |     fn child(mut self, child: impl IntoElement) -> Self
    |                                    ^^^^^^^^^^^ required by this bound in `ParentElement::child`
help: consider dereferencing here
    |
52  |                 .child(&*track.name)
    |                         +
help: consider removing the leading `&`-reference
    |
52  -                 .child(&track.name)
52  +                 .child(track.name)
    |

error[E0599]: no method named `selected` found for struct `gpui_component::button::Button` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\mixer.rs:82:26
    |
78  | /                     Button::new(ElementId::Name(format!("mixer-mute-{}", track.id).into()))
79  | |                         .label("M")
80  | |                         .small()
81  | |                         .compact()
82  | |                         .selected(track.muted)
    | |                         -^^^^^^^^ private field, not a method
    | |_________________________|
    |
    |
   ::: C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\styled.rs:355:8
    |
355 |       fn selected(self, selected: bool) -> Self;
    |          -------- the method is available for `gpui_component::button::Button` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `is_selected` with a similar name, but with different arguments
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\styled.rs:358:5
    |
358 |     fn is_selected(&self) -> bool;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Selectable` which provides `selected` is implemented but not in scope; perhaps you want to import it
    |
1   + use gpui_component::Selectable;
    |

error[E0599]: no variant or associated item named `ChevronsLeft` found for enum `IconName` in the current scope
  --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:46:43
   |
46 |                 .icon(Icon::new(IconName::ChevronsLeft))
   |                                           ^^^^^^^^^^^^ variant or associated item not found in `IconName`
   |
help: there is a variant with a similar name
   |
46 -                 .icon(Icon::new(IconName::ChevronsLeft))
46 +                 .icon(Icon::new(IconName::ChevronLeft)
   |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:49:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:49:26
    |
49  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
50  | |                     Tooltip::new("Go to Start")
51  | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:49:26: 49:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:49:26: 49:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:49:26: 49:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:49:26: 49:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-12950454724278098970.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:63:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:63:26
    |
63  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
64  | |                     Tooltip::new("Stop")
65  | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:63:26: 63:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:63:26: 63:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:63:26: 63:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:63:26: 63:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-10724466778259618157.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0061]: this function takes 1 argument but 3 arguments were supplied
  --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:82:21
   |
82 |                     Tooltip::new(
   |                     ^^^^^^^^^^^^
83 |                         if state.is_playing { "Pause" } else { "Play" },
84 |                         window, 
   |                         ------ unexpected argument #2
85 |                         cx
   |                         -- unexpected argument #3 of type `&mut gpui::Context<'_, DawPanel>`
   |
note: associated function defined here
  --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\tooltip.rs:22:12
   |
22 |     pub fn new(text: impl Into<Text>) -> Self {
   |            ^^^
help: remove the extra arguments
   |
83 -                         if state.is_playing { "Pause" } else { "Play" },
84 -                         window, 
83 +                         if state.is_playing { "Pause" } else { "Play" }
   |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:81:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:81:26
    |
81  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
82  | |                     Tooltip::new(
83  | |                         if state.is_playing { "Pause" } else { "Play" },
84  | |                         window, 
...   |
87  | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:81:26: 81:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:81:26: 81:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:81:26: 81:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:81:26: 81:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-17742563676678648723.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:101:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:101:26
    |
101 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
102 | |                     Tooltip::new("Record")
103 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:101:26: 101:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:101:26: 101:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:101:26: 101:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:101:26: 101:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-15554108885430308772.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0609]: no field `tempo` on type `&DawProject`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:114:20
    |
114 |         .map(|p| p.tempo)
    |                    ^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
114 |         .map(|p| p.transport.tempo)
    |                    ++++++++++

error[E0609]: no field `tempo` on type `&DawProject`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:161:20
    |
161 |         .map(|p| p.tempo)
    |                    ^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
161 |         .map(|p| p.transport.tempo)
    |                    ++++++++++

error[E0609]: no field `time_signature` on type `&DawProject`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:165:20
    |
165 |         .map(|p| p.time_signature.0)
    |                    ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `version`, `name`, `created_at`, `modified_at`, `sample_rate` ... and 3 others

error[E0609]: no field `time_signature` on type `&DawProject`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:169:20
    |
169 |         .map(|p| p.time_signature.1)
    |                    ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `version`, `name`, `created_at`, `modified_at`, `sample_rate` ... and 3 others

error[E0599]: no variant or associated item named `Music` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:212:52
    |
212 |                         .child(Icon::new(IconName::Music).size_4())
    |                                                    ^^^^^ variant or associated item not found in `IconName`

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:233:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:233:26
    |
233 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
234 | |                     Tooltip::new("Loop")
235 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:233:26: 233:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:233:26: 233:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:233:26: 233:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:233:26: 233:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-17490014564167080895.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no variant or associated item named `Volume2` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:269:43
    |
269 |                 .icon(Icon::new(IconName::Volume2))
    |                                           ^^^^^^^ variant or associated item not found in `IconName`

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:273:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:273:26
    |
273 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
274 | |                     Tooltip::new("Metronome")
275 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:273:26: 273:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:273:26: 273:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:273:26: 273:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:273:26: 273:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-601153560868586535.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@transport.rs:287:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:287:26
    |
287 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
288 | |                     Tooltip::new("Count-In")
289 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:287:26: 287:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:287:26: 287:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:287:26: 287:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:287:26: 287:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-10137866588028806341.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `&std::string::String: gpui::IntoElement` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\inspector.rs:95:36
    |
95  | ...                   .child(&track.name)
    |                        ----- ^^^^^^^^^^^ the trait `gpui::IntoElement` is not implemented for `&std::string::String`
    |                        |
    |                        required by a bound introduced by this call
    |
note: required by a bound in `child`
   --> C:\Users\redst\.cargo\git\checkouts\zed-a70e2ad075855582\21e75b8\crates\gpui\src\element.rs:161:36
    |
161 |     fn child(mut self, child: impl IntoElement) -> Self
    |                                    ^^^^^^^^^^^ required by this bound in `ParentElement::child`
help: consider dereferencing here
    |
95  |                             .child(&*track.name)
    |                                     +
help: consider removing the leading `&`-reference
    |
95  -                             .child(&track.name)
95  +                             .child(track.name)
    |

error[E0308]: `if` and `else` have incompatible types
   --> crates\engine\src\ui\panels\daw_editor\ui\inspector.rs:116:9
    |
77  | /      if let Some(track) = selected_track {
78  | |/         v_flex()
79  | ||             .w_full()
80  | ||             .p_4()
81  | ||             .gap_4()
...   ||
114 | ||             )
    | ||_____________- expected because of this
115 | |      } else {
116 | |          render_empty_inspector("No Track Selected", cx)
    | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Div`, found opaque type
117 | |      }
    | |______- `if` and `else` have incompatible types
...
132 |    fn render_empty_inspector(message: &'static str, cx: &mut Context<DawPanel>) -> impl IntoElement {
    |                                                                                    ---------------- the found opaque type
    |
    = note:   expected struct `gpui::Div`
            found opaque type `impl gpui::IntoElement`
help: `gpui::Div` implements `IntoElement` so you can box both arms and coerce to the trait object `Box<dyn IntoElement>`
    |
78  ~         Box::new(v_flex()
79  |             .w_full()
...
113 |                     )
114 ~             )) as Box<dyn gpui::IntoElement>
115 |     } else {
116 ~         Box::new(render_empty_inspector("No Track Selected", cx))
    |
help: you could change the return type to be a boxed trait object
    |
73  - fn render_track_inspector(state: &DawUiState, cx: &mut Context<DawPanel>) -> impl IntoElement {
73  + fn render_track_inspector(state: &DawUiState, cx: &mut Context<DawPanel>) -> Box<dyn IntoElement> {
    |
help: if you change the return type to expect trait objects, box the returned expressions
    |
78  ~         Box::new(v_flex()
79  |             .w_full()
...
113 |                     )
114 ~             ))
115 |     } else {
116 ~         Box::new(render_empty_inspector("No Track Selected", cx))
    |

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:65:9
    |
65  |         InputState::new(cx)
    |         ^^^^^^^^^^^^^^^ -- argument #1 of type `&mut gpui::Window` is missing
    |
note: associated function defined here
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\input\state.rs:350:12
    |
350 |     pub fn new(window: &mut Window, cx: &mut Context<Self>) -> Self {
    |            ^^^
help: provide the argument
    |
65  |         InputState::new(/* &mut gpui::Window */, cx)
    |                         ++++++++++++++++++++++++

error[E0433]: failed to resolve: use of undeclared type `Input`
  --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:76:13
   |
76 |             Input::new(search_state.clone())
   |             ^^^^^ use of undeclared type `Input`
   |
help: there is an enum variant `crate::graph::PinType::Input` and 1 other; try using the variant's enum
   |
76 -             Input::new(search_state.clone())
76 +             crate::graph::PinType::new(search_state.clone())
   |
76 -             Input::new(search_state.clone())
76 +             crate::ui::panels::blueprint_editor2::PinType::new(search_state.clone())
   |

error[E0599]: no method named `active` found for struct `gpui::Div` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:148:10
    |
141 | /     div()
142 | |         .w_full()
143 | |         .px_2()
144 | |         .py_2()
...   |
147 | |         .hover(|d| d.bg(cx.theme().accent.opacity(0.1)))
148 | |         .active(|d| d.bg(cx.theme().accent.opacity(0.2)))
    | |         -^^^^^^ method not found in `gpui::Div`
    | |_________|
    |

error[E0599]: no variant or associated item named `Music` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:167:52
    |
167 |                         .child(Icon::new(IconName::Music).size_4().color(cx.theme().muted_foreground))
    |                                                    ^^^^^ variant or associated item not found in `IconName`

error[E0599]: no method named `color` found for struct `Icon` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:167:68
    |
167 |                         .child(Icon::new(IconName::Music).size_4().color(cx.theme().muted_foreground))
    |                                                                    ^^^^^
    |
help: there is a method `text_color` with a similar name
    |
167 |                         .child(Icon::new(IconName::Music).size_4().text_color(cx.theme().muted_foreground))
    |                                                                    +++++

error[E0599]: no method named `color` found for struct `Icon` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:226:18
    |
224 | /             Icon::new(IconName::Inbox)
225 | |                 .size(px(48.0))
226 | |                 .color(cx.theme().muted_foreground.opacity(0.5))
    | |_________________-^^^^^
    |
help: there is a method `text_color` with a similar name
    |
226 |                 .text_color(cx.theme().muted_foreground.opacity(0.5))
    |                  +++++

error[E0599]: no variant or associated item named `FilePlus` found for enum `IconName` in the current scope
  --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:46:43
   |
46 |                 .icon(Icon::new(IconName::FilePlus))
   |                                           ^^^^^^^^ variant or associated item not found in `IconName`

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:49:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:49:26
    |
49  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
50  | |                     Tooltip::new("New Project")
51  | |                 })
    | |_________________^ the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:49:26: 49:45}>` is not implemented for `ArcCow<'static, str>`
    |
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:49:26: 49:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:49:26: 49:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:49:26: 49:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-16525410036889522848.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:61:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:61:26
    |
61  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
62  | |                     Tooltip::new("Open Project")
63  | |                 })
    | |_________________^ the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:61:26: 61:45}>` is not implemented for `ArcCow<'static, str>`
    |
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:61:26: 61:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:61:26: 61:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:61:26: 61:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-2780589957034890109.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no variant or associated item named `Save` found for enum `IconName` in the current scope
  --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:70:43
   |
70 |                 .icon(Icon::new(IconName::Save))
   |                                           ^^^^ variant or associated item not found in `IconName`
   |
help: there is a variant with a similar name
   |
70 -                 .icon(Icon::new(IconName::Save))
70 +                 .icon(Icon::new(IconName::Safe)
   |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:74:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:74:26
    |
74  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
75  | |                     Tooltip::new("Save Project")
76  | |                 })
    | |_________________^ the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:74:26: 74:45}>` is not implemented for `ArcCow<'static, str>`
    |
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:74:26: 74:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:74:26: 74:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:74:26: 74:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-3477663161584356751.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:92:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:92:26
    |
92  |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
93  | |                     Tooltip::new("Export Audio")
94  | |                 })
    | |_________________^ the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:92:26: 92:45}>` is not implemented for `ArcCow<'static, str>`
    |
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:92:26: 92:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:92:26: 92:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:92:26: 92:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-5966394728032084862.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:108:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:108:26
    |
108 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
109 | |                     Tooltip::new("Select Tool")
110 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:108:26: 108:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:108:26: 108:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:108:26: 108:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:108:26: 108:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-2822947781289185345.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:122:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:122:26
    |
122 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
123 | |                     Tooltip::new("Draw Tool")
124 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:122:26: 122:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:122:26: 122:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:122:26: 122:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:122:26: 122:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-15391585021305441777.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no variant or associated item named `Scissors` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:132:43
    |
132 |                 .icon(Icon::new(IconName::Scissors))
    |                                           ^^^^^^^^ variant or associated item not found in `IconName`
    |
help: there is a variant with a similar name
    |
132 -                 .icon(Icon::new(IconName::Scissors))
132 +                 .icon(Icon::new(IconName::Scissor)
    |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:136:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:136:26
    |
136 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
137 | |                     Tooltip::new("Cut Tool")
138 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:136:26: 136:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:136:26: 136:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:136:26: 136:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:136:26: 136:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-2232500337169818514.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no variant or associated item named `Eraser` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:146:43
    |
146 |                 .icon(Icon::new(IconName::Eraser))
    |                                           ^^^^^^ variant or associated item not found in `IconName`
    |
help: there is a variant with a similar name
    |
146 -                 .icon(Icon::new(IconName::Eraser))
146 +                 .icon(Icon::new(IconName::Erase)
    |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:150:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:150:26
    |
150 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
151 | |                     Tooltip::new("Erase Tool")
152 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:150:26: 150:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:150:26: 150:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:150:26: 150:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:150:26: 150:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-6172209863453199970.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: no variant or associated item named `Grid3x3` found for enum `IconName` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:205:43
    |
205 |                 .icon(Icon::new(IconName::Grid3x3))
    |                                           ^^^^^^^ variant or associated item not found in `IconName`

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:209:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:209:26
    |
209 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
210 | |                     Tooltip::new("Toggle Snap")
211 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:209:26: 209:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:209:26: 209:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:209:26: 209:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:209:26: 209:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-12985035550231435315.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@toolbar.rs:225:26}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:225:26
    |
225 |                   .tooltip(move |_window, _cx| {
    |  __________________-------_^
    | |                  |
    | |                  required by a bound introduced by this call
226 | |                     Tooltip::new("Snap Value")
227 | |                 })
    | |_________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:225:26: 225:45}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:225:26: 225:45}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:225:26: 225:45}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:225:26: 225:45}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-7011200073382691730.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `&std::string::String: gpui::IntoElement` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:56:32
    |
56  |                         .child(&track.name)
    |                          ----- ^^^^^^^^^^^ the trait `gpui::IntoElement` is not implemented for `&std::string::String`
    |                          |
    |                          required by a bound introduced by this call
    |
note: required by a bound in `child`
   --> C:\Users\redst\.cargo\git\checkouts\zed-a70e2ad075855582\21e75b8\crates\gpui\src\element.rs:161:36
    |
161 |     fn child(mut self, child: impl IntoElement) -> Self
    |                                    ^^^^^^^^^^^ required by this bound in `ParentElement::child`
help: consider dereferencing here
    |
56  |                         .child(&*track.name)
    |                                 +
help: consider removing the leading `&`-reference
    |
56  -                         .child(&track.name)
56  +                         .child(track.name)
    |

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@track_header.rs:70:34}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:70:34
    |
70  |                           .tooltip(move |_window, _cx| {
    |  __________________________-------_^
    | |                          |
    | |                          required by a bound introduced by this call
71  | |                             Tooltip::new("Mute")
72  | |                         })
    | |_________________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:70:34: 70:53}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:70:34: 70:53}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:70:34: 70:53}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:70:34: 70:53}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-16527034171803296810.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@track_header.rs:87:34}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:87:34
    |
87  |                           .tooltip(move |_window, _cx| {
    |  __________________________-------_^
    | |                          |
    | |                          required by a bound introduced by this call
88  | |                             Tooltip::new("Solo")
89  | |                         })
    | |_________________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:87:34: 87:53}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:87:34: 87:53}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:87:34: 87:53}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:87:34: 87:53}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-1278238041160774970.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `ArcCow<'static, str>: From<{closure@track_header.rs:101:34}>` is not satisfied
   --> crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:101:34
    |
101 |                           .tooltip(move |_window, _cx| {
    |  __________________________-------_^
    | |                          |
    | |                          required by a bound introduced by this call
102 | |                             Tooltip::new("Record Arm")
103 | |                         })
    | |_________________________^ unsatisfied trait bound
    |
    = help: the trait `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:101:34: 101:53}>` is not implemented for `ArcCow<'static, str>`
    = help: the following other types implement trait `From<T>`:
              `ArcCow<'_, T>` implements `From<&T>`
              `ArcCow<'_, T>` implements `From<&std::sync::Arc<T>>`
              `ArcCow<'_, T>` implements `From<std::sync::Arc<T>>`
              `ArcCow<'_, [T]>` implements `From<Vec<T>>`
              `ArcCow<'_, [u8]>` implements `From<&str>`
              `ArcCow<'_, str>` implements `From<&std::string::String>`
              `ArcCow<'_, str>` implements `From<Cow<'_, str>>`
              `ArcCow<'_, str>` implements `From<std::string::String>`
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:101:34: 101:53}` to implement `Into<ArcCow<'static, str>>`
    = note: required for `gpui::SharedString` to implement `From<{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:101:34: 101:53}>`
    = note: 1 redundant requirement hidden
    = note: required for `{closure@crates\engine\src\ui\panels\daw_editor\ui\track_header.rs:101:34: 101:53}` to implement `Into<gpui::SharedString>`
note: required by a bound in `gpui_component::button::Button::tooltip`
   --> C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\crates\ui\src\button\button.rs:287:44
    |
287 |     pub fn tooltip(mut self, tooltip: impl Into<SharedString>) -> Self {
    |                                            ^^^^^^^^^^^^^^^^^^ required by this bound in `Button::tooltip`
    = note: the full name for the type has been written to 'C:\Users\redst\OneDrive\Documents\GitHub\Zenyx\Pulsar-Native\target\debug\deps\pulsar_engine.long-type-16644500150403362029.txt'
    = note: consider using `--verbose` to print the full type name to the console

warning: unused variable: `state`
  --> crates\engine\src\ui\panels\daw_editor\ui\clip_editor.rs:10:27
   |
10 | pub fn render_clip_editor(state: &DawUiState, cx: &mut Context<DawPanel>) -> impl IntoElement {
   |                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `window`
   --> crates\engine\src\ui\problems_drawer.rs:105:21
    |
105 |     fn render(self, window: &mut Window, cx: &mut App) -> impl IntoElement {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `window`
  --> crates\engine\src\ui\settings_screen.rs:42:26
   |
42 |     fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {
   |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `w`
   --> crates\engine\src\ui\settings_screen.rs:103:73
    |
103 |             .on_action(cx.listener(|screen, action: &SelectThemeAction, w: &mut gpui::Window, cx| {
    |                                                                         ^ help: if this is intentional, prefix it with an underscore: `_w`

warning: unused variable: `window`
  --> crates\engine\src\ui\settings_window.rs:36:26
   |
36 |     fn render(&mut self, window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {
   |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

error[E0308]: mismatched types
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:438:46
    |
438 |             let track = Track::new(track_id, name);
    |                         ----------           ^^^^ expected `TrackType`, found `String`
    |                         |
    |                         arguments to this function are incorrect
    |
note: associated function defined here
   --> crates\engine\src\ui\panels\daw_editor\audio_types.rs:289:12
    |
289 |     pub fn new(name: impl Into<String>, track_type: TrackType) -> Self {
    |            ^^^                          ---------------------

error[E0308]: mismatched types
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:459:29
    |
459 |                 asset_path: file_path.to_string_lossy().to_string(),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `PathBuf`, found `String`
    |
help: call `Into::into` on this expression to convert `std::string::String` into `PathBuf`
    |
459 |                 asset_path: file_path.to_string_lossy().to_string().into(),
    |                                                                    +++++++

error[E0560]: struct `audio_types::AudioClip` has no field named `start_beat`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:460:17
    |
460 |                 start_beat,
    |                 ^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `duration_beats`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:461:17
    |
461 |                 duration_beats: 4.0, // Default, should be calculated from audio file
    |                 ^^^^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `offset_seconds`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:462:17
    |
462 |                 offset_seconds: 0.0,
    |                 ^^^^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `fade_in_beats`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:463:17
    |
463 |                 fade_in_beats: 0.0,
    |                 ^^^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `fade_out_beats`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:464:17
    |
464 |                 fade_out_beats: 0.0,
    |                 ^^^^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `time_stretch`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:466:17
    |
466 |                 time_stretch: 1.0,
    |                 ^^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0560]: struct `audio_types::AudioClip` has no field named `pitch_shift`
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:467:17
    |
467 |                 pitch_shift: 0.0,
    |                 ^^^^^^^^^^^ `audio_types::AudioClip` does not have this field
    |
    = note: available fields are: `name`, `start_time`, `duration`, `offset`, `fade_in` ... and 2 others

error[E0282]: type annotations needed
   --> crates\engine\src\ui\panels\daw_editor\ui\browser.rs:249:21
    |
249 |     cx.spawn(|this, mut cx| async move {
    |                     ^^^^^^
...
260 |                     cx.update(|cx| {
    |                     -- type must be known at this point
    |
help: consider giving this closure parameter an explicit type
    |
249 |     cx.spawn(|this, mut cx: /* Type */| async move {
    |                           ++++++++++++

error[E0282]: type annotations needed
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:282:21
    |
282 |     cx.spawn(|this, mut cx| async move {
    |                     ^^^^^^
...
290 |             cx.update(|cx| {
    |             -- type must be known at this point
    |
help: consider giving this closure parameter an explicit type
    |
282 |     cx.spawn(|this, mut cx: /* Type */| async move {
    |                           ++++++++++++

error[E0599]: no method named `save_project` found for mutable reference `&mut DawPanel` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\mod.rs:107:23
    |
107 |                 panel.save_project(path.clone())
    |                       ^^^^^^^^^^^^
    |
help: there is a method `load_project` with a similar name, but with different arguments
   --> crates\engine\src\ui\panels\daw_editor\ui\panel.rs:25:5
    |
25  |     pub fn load_project(&mut self, path: PathBuf, cx: &mut Context<Self>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `new_project` found for mutable reference `&mut DawPanel` in the current scope
   --> crates\engine\src\ui\panels\daw_editor\mod.rs:115:19
    |
115 |             panel.new_project(name, cx);
    |                   ^^^^^^^^^^^ method not found in `&mut DawPanel`

warning: unused import: `gpui::prelude`
 --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:3:5
  |
3 | use gpui::prelude::*;
  |     ^^^^^^^^^^^^^

warning: unused import: `StatefulInteractiveElement`
 --> crates\engine\src\ui\panels\blueprint_editor2\node_creation_menu.rs:3:56
  |
3 | use gpui::prelude::{FluentBuilder, InteractiveElement, StatefulInteractiveElement, Styled};
  |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Read`
 --> crates\engine\src\ui\rust_analyzer_manager.rs:7:42
  |
7 | use std::io::{BufRead, BufReader, Write, Read};
  |                                          ^^^^

warning: unused import: `gpui::prelude::FluentBuilder`
 --> crates\engine\src\ui\panels\daw_editor\ui\mixer.rs:7:5
  |
7 | use gpui::prelude::FluentBuilder;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `gpui::prelude::FluentBuilder`
 --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:7:5
  |
7 | use gpui::prelude::FluentBuilder;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `node`
   --> crates\engine\src\compiler\data_resolver.rs:116:23
    |
116 |         for (node_id, node) in &graph.nodes {
    |                       ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

warning: unused variable: `graph`
   --> crates\engine\src\compiler\mod.rs:101:29
    |
101 | pub fn compile_graph_legacy(graph: &GraphDescription) -> Result<String, String> {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: variable does not need to be mutable
  --> crates\engine\src\graph\mod.rs:59:29
   |
59 |                         let mut pin: Pin = serde_json::from_value(v.clone()).ok()?;
   |                             ----^^^
   |                             |
   |                             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `window`
   --> crates\engine\src\ui\app.rs:288:33
    |
288 |     fn toggle_drawer(&mut self, window: &mut Window, cx: &mut Context<Self>) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
   --> crates\engine\src\ui\app.rs:510:9
    |
510 |         cx: &mut Context<Self>,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\entry_screen.rs:121:36
    |
121 |         cx.spawn(async move |this, mut cx| {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\entry_screen.rs:168:36
    |
168 |         cx.spawn(async move |this, mut cx| {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\entry_screen.rs:314:36
    |
314 |         cx.spawn(async move |this, mut cx| {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\entry_screen.rs:339:36
    |
339 |         cx.spawn(async move |this, mut cx| {
    |                                    ----^^
    |                                    |
    |                                    help: remove this `mut`

warning: unused variable: `cx`
  --> crates\engine\src\ui\entry_window.rs:19:28
   |
19 |     pub fn new_placeholder(cx: &mut Context<Self>) -> Self {
   |                            ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `window`
   --> crates\engine\src\ui\file_manager_drawer.rs:425:33
    |
425 |     fn commit_rename(&mut self, window: &mut Window, cx: &mut Context<Self>) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `file_path`
  --> crates\engine\src\ui\lsp_completion_provider.rs:64:13
   |
64 |         let file_path = self.file_path.clone();
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_path`

warning: unused variable: `action`
   --> crates\engine\src\ui\menu.rs:221:34
    |
221 |     fn on_menu_action(&mut self, action: &dyn Action, _: &mut Window, cx: &mut Context<Self>) {
    |                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_action`

warning: unused variable: `event`
   --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:829:50
    |
829 |                         cx.listener(move |panel, event: &MouseDownEvent, window, cx| {
    |                                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `node_screen_pos`
    --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:1677:13
     |
1677 |         let node_screen_pos = Self::graph_to_screen_pos(node.position, graph);
     |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_node_screen_pos`

warning: unused variable: `node_screen_size`
    --> crates\engine\src\ui\panels\blueprint_editor2\node_graph.rs:1678:13
     |
1678 |         let node_screen_size = Size::new(
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_node_screen_size`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:387:13
    |
387 |         let mut result = Self {
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `subscription`
   --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:880:21
    |
880 |                 let subscription = cx.subscribe_in(
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_subscription`

warning: variable does not need to be mutable
    --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:1122:13
     |
1122 |         let mut new_comment = super::BlueprintComment::new(center_graph, window, cx);
     |             ----^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:1473:36
     |
1473 |         cx.spawn(async move |view, mut cx| {
     |                                    ----^^
     |                                    |
     |                                    help: remove this `mut`

warning: unused variable: `add_to_selection`
    --> crates\engine\src\ui\panels\blueprint_editor2\panel.rs:1674:9
     |
1674 |         add_to_selection: bool,
     |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_add_to_selection`

warning: unused variable: `send_idx`
   --> crates\engine\src\ui\panels\daw_editor\audio_graph.rs:141:22
    |
141 |                 for (send_idx, send) in track.sends.iter().enumerate() {
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_send_idx`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\panels\daw_editor\real_time_audio.rs:127:13
    |
127 |         let mut underrun_count = 0u64;
    |             ----^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> crates\engine\src\ui\panels\daw_editor\ui\state.rs:486:17
    |
479 |         if let Some(ref proj_dir) = self.project_dir {
    |                     ------------ immutable borrow occurs here
...
486 |                 self.scan_audio_files(proj_dir);
    |                 ^^^^^----------------^^^^^^^^^^
    |                 |    |
    |                 |    immutable borrow later used by call
    |                 mutable borrow occurs here

warning: unused variable: `window`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:299:46
    |
299 | fn handle_play_pause(state: &mut DawUiState, window: &mut Window, cx: &mut Context<DawPanel>) {
    |                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

error: implementation of `AsyncFnOnce` is not general enough
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:306:9
    |
306 | /         cx.spawn(|_this, _cx| async move {
307 | |             if playing {
308 | |                 let _ = service.play().await;
309 | |             } else {
...   |
312 | |         }).detach();
    | |__________^ implementation of `AsyncFnOnce` is not general enough
    |
    = note: `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:306:18: 306:30}` must implement `AsyncFnOnce<(gpui::WeakEntity<DawPanel>, &'1 mut AsyncApp)>`, for any lifetime `'1`...
    = note: ...but it actually implements `AsyncFnOnce<(gpui::WeakEntity<DawPanel>, &'2 mut AsyncApp)>`, for some specific lifetime `'2`

error[E0373]: closure may outlive the current function, but it borrows `playing`, which is owned by the current function
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:306:18
    |
306 |         cx.spawn(|_this, _cx| async move {
    |                  ^^^^^^^^^^^^ may outlive borrowed value `playing`
307 |             if playing {
    |                ------- `playing` is borrowed here
    |
note: function requires argument type to outlive `'static`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:306:9
    |
306 | /         cx.spawn(|_this, _cx| async move {
307 | |             if playing {
308 | |                 let _ = service.play().await;
309 | |             } else {
...   |
312 | |         }).detach();
    | |__________^
help: to force the closure to take ownership of `playing` (and any other referenced variables), use the `move` keyword
    |
306 |         cx.spawn(move |_this, _cx| async move {
    |                  ++++

warning: unused variable: `window`
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:318:40
    |
318 | fn handle_stop(state: &mut DawUiState, window: &mut Window, cx: &mut Context<DawPanel>) {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

error: implementation of `AsyncFnOnce` is not general enough
   --> crates\engine\src\ui\panels\daw_editor\ui\transport.rs:325:9
    |
325 | /         cx.spawn(|_this, _cx| async move {
326 | |             let _ = service.stop().await;
327 | |         }).detach();
    | |__________^ implementation of `AsyncFnOnce` is not general enough
    |
    = note: `{closure@crates\engine\src\ui\panels\daw_editor\ui\transport.rs:325:18: 325:30}` must implement `AsyncFnOnce<(gpui::WeakEntity<DawPanel>, &'1 mut AsyncApp)>`, for any lifetime `'1`...
    = note: ...but it actually implements `AsyncFnOnce<(gpui::WeakEntity<DawPanel>, &'2 mut AsyncApp)>`, for some specific lifetime `'2`

warning: unused variable: `window`
   --> crates\engine\src\ui\panels\daw_editor\ui\toolbar.rs:272:47
    |
272 | fn handle_new_project(state: &mut DawUiState, window: &mut Window, cx: &mut Context<DawPanel>) {
    |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: variable does not need to be mutable
  --> crates\engine\src\ui\panels\daw_editor\mod.rs:72:36
   |
72 |         cx.spawn(async move |this, mut cx| {
   |                                    ----^^
   |                                    |
   |                                    help: remove this `mut`

warning: unused variable: `last_ui_refresh`
   --> crates\engine\src\ui\panels\level_editor.rs:128:17
    |
128 |         let mut last_ui_refresh = std::time::Instant::now();
    |                 ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_last_ui_refresh`

warning: unused variable: `ui_refresh_interval`
   --> crates\engine\src\ui\panels\level_editor.rs:129:13
    |
129 |         let ui_refresh_interval = Duration::from_millis(16); // Limit UI refreshes to ~60fps
    |             ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ui_refresh_interval`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\panels\level_editor.rs:128:13
    |
128 |         let mut last_ui_refresh = std::time::Instant::now();
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `window`
  --> crates\engine\src\ui\panels\script_editor\file_explorer.rs:88:16
   |
88 |     pub fn new(window: &mut Window, cx: &mut Context<Self>) -> Self {
   |                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `entry`
   --> crates\engine\src\ui\panels\script_editor\file_explorer.rs:198:19
    |
198 |         for (idx, entry) in self.file_tree.iter().enumerate() {
    |                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_entry`

warning: unused variable: `state`
   --> crates\engine\src\ui\panels\script_editor\text_editor.rs:205:46
    |
205 |                 file.input_state.update(cx, |state, cx| {
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
   --> crates\engine\src\ui\panels\script_editor\text_editor.rs:221:46
    |
221 |                 file.input_state.update(cx, |state, cx| {
    |                                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `window`
   --> crates\engine\src\ui\panels\script_editor\text_editor.rs:906:37
    |
906 |     fn render_editor_content(&self, window: &mut Window, cx: &mut Context<Self>) -> AnyElement {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `window`
  --> crates\engine\src\ui\panels\script_editor\autocomplete_integration.rs:26:5
   |
26 |     window: &mut Window,
   |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `cx`
  --> crates\engine\src\ui\panels\script_editor\autocomplete_integration.rs:27:5
   |
27 |     cx: &mut Context<InputState>,
   |     ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `this`
  --> crates\engine\src\ui\panels\script_editor\mod.rs:44:37
   |
44 |         cx.subscribe(&text_editor, |this: &mut Self, _editor, event: &TextEditorEvent, cx| {
   |                                     ^^^^ help: if this is intentional, prefix it with an underscore: `_this`

warning: unused variable: `analyzer_for_sub`
  --> crates\engine\src\ui\panels\script_editor\mod.rs:69:13
   |
69 |         let analyzer_for_sub = analyzer.clone();
   |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_analyzer_for_sub`

warning: variable does not need to be mutable
  --> crates\engine\src\ui\project_selector.rs:27:36
   |
27 |         cx.spawn(async move |this, mut cx| {
   |                                    ----^^
   |                                    |
   |                                    help: remove this `mut`

warning: unused variable: `cx`
  --> crates\engine\src\ui\rust_analyzer_manager.rs:71:38
   |
71 |     pub fn new(_window: &mut Window, cx: &mut Context<Self>) -> Self {
   |                                      ^^ help: if this is intentional, prefix it with an underscore: `_cx`

warning: unused variable: `process_lock`
   --> crates\engine\src\ui\rust_analyzer_manager.rs:599:21
    |
599 |             let mut process_lock = process_arc.lock().unwrap();
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_process_lock`

warning: variable does not need to be mutable
   --> crates\engine\src\ui\rust_analyzer_manager.rs:599:17
    |
599 |             let mut process_lock = process_arc.lock().unwrap();
    |                 ----^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: unused variable: `id`
   --> crates\engine\src\ui\rust_analyzer_manager.rs:705:25
    |
705 |             if let Some(id) = msg.get("id").and_then(|id| id.as_i64()) {
    |                         ^^ help: if this is intentional, prefix it with an underscore: `_id`

warning: unused variable: `request_id_arc`
    --> crates\engine\src\ui\rust_analyzer_manager.rs:1095:45
     |
1095 | ...                   let request_id_arc = self.request_id.clone();
     |                           ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request_id_arc`

warning: unused variable: `window`
  --> crates\engine\src\ui\settings_window.rs:15:16
   |
15 |     pub fn new(window: &mut Window, cx: &mut Context<Self>) -> Self {
   |                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_window`

warning: unused variable: `engine_settings`
   --> crates\engine\src\main.rs:118:13
    |
118 |     let mut engine_settings = EngineSettings::load(&config_file);
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_engine_settings`

warning: unused variable: `entry_window`
   --> crates\engine\src\main.rs:163:13
    |
163 |         let entry_window = cx
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entry_window`

warning: variable does not need to be mutable
   --> crates\engine\src\main.rs:118:9
    |
118 |     let mut engine_settings = EngineSettings::load(&config_file);
    |         ----^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `config_file`
   --> crates\engine\src\main.rs:244:9
    |
244 |     let config_file = config_dir.join("engine.toml");
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_config_file`

Some errors have detailed explanations: E0061, E0277, E0282, E0308, E0373, E0425, E0433, E0502, E0560...
For more information about an error, try `rustc --explain E0061`.
warning: `pulsar_engine` (bin "pulsar_engine") generated 142 warnings
error: could not compile `pulsar_engine` (bin "pulsar_engine") due to 70 previous errors; 142 warnings emitted
